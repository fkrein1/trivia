{"version":3,"sources":["trivia.png","services/triviaToken.js","pages/Login.js","redux/actions/index.js","services/getAsk.js","pages/Game.js","pages/Feedback.js","pages/Ranking.js","App.js","redux/reducers/player.js","redux/reducers/index.js","redux/store/index.js","index.js"],"names":["module","exports","getToken","fetch","apiToken","json","apiTokenData","token","Login","handleChange","target","setState","name","value","loginBtnEnabled","state","length","loginBtnClick","props","history","dispatch","localStorage","setItem","type","payload","push","settingsBtnClick","difficulty","category","this","id","placeholder","onChange","disabled","onClick","React","Component","connect","getAsk","url","Game","getTrivia","getItem","API_ASK","response_code","removeItem","trivia","results","setTimer","setAnswers","counter","timer","setIntervalId","setInterval","prevState","clearInterval","disabledQuestion","correctAnswersIndex","forEach","question","max","incorrect_answers","random","Math","floor","allAnswers","index","wrongAnswers","splice","correct_answer","renderAnswers","currentQuestion","correct","map","answer","ind","key","data-testid","dataTestAnswer","className","btnAnswerStyle","answerClick","decodeHTMLEntities","calculateScore","dataset","testid","score","assertions","updateScore","indexOf","rankingSetup","playerResult","JSON","stringify","currentRanking","parse","newRanking","nextClick","text","textArea","document","createElement","innerHTML","class","player","Feedback","showMessage","Ranking","ranking","sortedRanking","sort","a","b","App","to","src","logo","alt","exact","path","component","INITIAL_STATE","playerReducer","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","basename","process","getElementById"],"mappings":"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","file":"static/js/main.ebeb0b52.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","const API_URL = 'https://opentdb.com/api_token.php?command=request';\n\nconst getToken = async () => {\n  const apiToken = await fetch(API_URL);\n  const apiTokenData = await apiToken.json();\n  return apiTokenData.token;\n};\n\nexport default getToken;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport getToken from '../services/triviaToken';\nimport { addUser, resetState } from '../redux/actions';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      name: '',\n      difficulty: 'any',\n      category: 'any',\n    };\n  }\n\n  componentDidMount() {\n    const { dispatch } = this.props;\n    dispatch(resetState());\n  }\n\n  handleChange = ({ target }) => {\n    this.setState({ [target.name]: target.value });\n  }\n\n  loginBtnEnabled = () => {\n    const { name } = this.state;\n    if (name.length > 0) return false;\n    return true;\n  }\n\n  loginBtnClick = async () => {\n    const { history, dispatch } = this.props;\n    const token = await getToken();\n    localStorage.setItem('token', token);\n    dispatch(addUser(this.state));\n    history.push('/game');\n  }\n\n  settingsBtnClick = () => {\n    const { history } = this.props;\n    history.push('/settings');\n  }\n\n  render() {\n    const { name } = this.state;\n    return (\n      <form id=\"login\">\n        <input\n          placeholder=\"Insert your name\"\n          type=\"text\"\n          name=\"name\"\n          value={ name }\n          onChange={ this.handleChange }\n        />\n        <select name=\"difficulty\" id=\"difficulty\" onChange={ this.handleChange }>\n          <option value=\"any\">Any Difficulty</option>\n          <option value=\"easy\">Easy</option>\n          <option value=\"medium\">Medium</option>\n          <option value=\"hard\">Hard</option>\n        </select>\n\n        <select name=\"category\" id=\"category\" onChange={ this.handleChange }>\n          <option value=\"any\">Any Category</option>\n          <option value=\"27\">Animals</option>\n          <option value=\"31\">Anime</option>\n          <option value=\"10\">Books</option>\n          <option value=\"11\">Films</option>\n          <option value=\"9\">General Knowledge</option>\n          <option value=\"23\">History</option>\n          <option value=\"12\">Music</option>\n          <option value=\"17\">Science</option> \n          <option value=\"21\">Sports</option>\n          <option value=\"14\">Television</option>\n          <option value=\"15\">Video Game</option>\n        </select>\n        <button\n          type=\"button\"\n          disabled={ this.loginBtnEnabled() }\n          onClick={ this.loginBtnClick }\n        >\n          PLAY\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default connect()(Login);","export const addUser = (user) => ({\n  type: 'ADD_USER',\n  payload: user,\n});\n\nexport const updateScore = (score, assertions) => ({\n  type: 'UPDATE_SCORE',\n  payload: {\n    score,\n    assertions,\n  },\n});\n\nexport const resetState = () => ({\n  type: 'RESET_STATE',\n});\n","const API_URL = 'https://opentdb.com/api.php?amount=5&token=';\n\nconst getAsk = async (token, difficulty, category) => {\n  let url = `${API_URL}${token}`;\n  if (difficulty !== 'any') url = `${url}&difficulty=${difficulty}`;\n  if (category !== 'any') url = `${url}&category=${category}`;\n  const apiToken = await fetch(url);\n  const apiTokenData = await apiToken.json();\n  return apiTokenData;\n};\n\nexport default getAsk;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport getAsk from '../services/getAsk';\nimport { updateScore } from '../redux/actions';\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      trivia: [],\n      currentQuestion: 0,\n      disabledQuestion: false,\n      timer: 30,\n      correctAnswersIndex: [],\n      allAnswers: [],\n      setIntervalId: 0,\n    };\n  }\n\n  async componentDidMount() {\n    await this.getTrivia();\n  }\n\n  componentWillUnmount() {\n    const { setIntervalId } = this.state;\n    clearInterval(setIntervalId);\n  }\n\n  getTrivia = async () => {\n    const { history, difficulty, category } = this.props;\n    const token = localStorage.getItem('token');\n    if (token === null) return history.push('/');\n    const API_ASK = await getAsk(token, difficulty, category);\n    const tokenInvalid = 3;\n    if (API_ASK.response_code === tokenInvalid) {\n      localStorage.removeItem('token');\n      return history.push('/');\n    }\n    const tokenValid = 0;\n    if (API_ASK.response_code === tokenValid) {\n      this.setState({ trivia: API_ASK.results });\n      this.setTimer();\n      this.setAnswers();\n    }\n  }\n\n  setTimer = () => {\n    const { timer } = this.state;\n    const oneSecond = 1000;\n    let counter = timer;\n    const setIntervalId = setInterval(() => {\n      this.setState((prevState) => ({\n        timer: prevState.timer - 1,\n      }));\n      counter -= 1;\n      if (counter === 0) {\n        clearInterval(setIntervalId);\n        this.setState({\n          disabledQuestion: true,\n        });\n      }\n    }, oneSecond);\n    this.setState({ setIntervalId });\n  }\n\n  setAnswers = () => {\n    const { trivia } = this.state;\n    const correctAnswersIndex = [];\n    trivia.forEach((question) => {\n      const max = question.incorrect_answers.length;\n      const random = Math.floor(Math.random() * (max - 0 + 1) + 0);\n      correctAnswersIndex.push(random);\n    });\n\n    const allAnswers = [];\n    trivia.forEach((question, index) => {\n      const wrongAnswers = [...question.incorrect_answers];\n      wrongAnswers.splice(correctAnswersIndex[index], 0, question.correct_answer);\n      allAnswers.push(wrongAnswers);\n    });\n    this.setState({ correctAnswersIndex, allAnswers });\n  }\n\n  renderAnswers = () => {\n    const {\n      correctAnswersIndex,\n      allAnswers,\n      currentQuestion,\n      disabledQuestion,\n    } = this.state;\n    const correct = correctAnswersIndex[currentQuestion];\n    return (\n      allAnswers[currentQuestion]\n        .map((answer, ind) => (\n          <button\n            key={ ind }\n            type=\"button\"\n            data-testid={ this.dataTestAnswer(ind, correct) }\n            className={ this.btnAnswerStyle(ind, correct) }\n            onClick={ this.answerClick }\n            disabled={ disabledQuestion }\n          >\n            { this.decodeHTMLEntities(answer) }\n          </button>\n        ))\n    );\n  }\n\n  dataTestAnswer = (index, correct) => {\n    if (index === correct) {\n      return 'correct-answer';\n    } if (index > correct) {\n      return `wrong-answer-${index - 1}`;\n    } return `wrong-answer-${index}`;\n  }\n\n  btnAnswerStyle = (index, correct) => {\n    const { disabledQuestion } = this.state;\n    if (disabledQuestion && index === correct) return 'correct-btn';\n    if (disabledQuestion && index !== correct) return 'incorrect-btn';\n  }\n\n  answerClick = ({ target }) => {\n    const { setIntervalId } = this.state;\n    clearInterval(setIntervalId);\n    this.setState({\n      disabledQuestion: true,\n    }, this.calculateScore(target));\n  }\n\n  calculateScore = ({ dataset: { testid } }) => {\n    if (testid !== 'correct-answer') return;\n    const { trivia, currentQuestion, timer } = this.state;\n    const { score, assertions, dispatch } = this.props;\n    const question = trivia[currentQuestion];\n    const difficulty = ['easy', 'medium', 'hard'];\n    const difficultyMultiplier = difficulty.indexOf(question.difficulty) + 1;\n    const basePoints = 10;\n    const newScore = score + basePoints + (timer * difficultyMultiplier);\n    const newAssertions = assertions + 1;\n    dispatch(updateScore(newScore, newAssertions));\n  }\n\n  rankingSetup = () => {\n    const { name, score } = this.props;\n    const playerResult = { name, score };\n\n    if (localStorage.getItem('ranking') === null) {\n      localStorage.setItem('ranking', JSON.stringify([playerResult]));\n    } else {  \n      const currentRanking = JSON.parse(localStorage.getItem('ranking'));\n      const newRanking = [...currentRanking, playerResult];\n      localStorage.setItem('ranking', JSON.stringify(newRanking));\n      }\n    }\n\n  nextClick = () => {\n    const { currentQuestion } = this.state;\n    const { history } = this.props;\n    const finalQuestion = 4;\n    if (currentQuestion === finalQuestion) {\n      this.rankingSetup();\n      history.push('/feedback');\n    }\n    else {\n      this.setState((prevState) => ({\n        currentQuestion: prevState.currentQuestion + 1,\n        disabledQuestion: false,\n        timer: 30,\n      }));\n      this.setTimer();\n    }\n  }\n\n   decodeHTMLEntities = (text) => {\n    var textArea = document.createElement('textarea');\n    textArea.innerHTML = text;\n    return textArea.value;\n  }\n\n  render() {\n    const {\n      trivia,\n      currentQuestion,\n      timer,\n      correctAnswersIndex,\n      disabledQuestion,\n    } = this.state;\n    const { name, score } = this.props;\n    return (\n      <div id=\"game\">\n        <header>\n          <p>{`Score: ${score}`}</p>\n        </header>\n        <p class=\"timer\">{ timer }</p>\n        { correctAnswersIndex.length !== 0 && (\n          <div>\n            <p class=\"question\">{ this.decodeHTMLEntities(trivia[currentQuestion].question) }</p>\n            <div class=\"answers\">{ this.renderAnswers()}</div>\n            { disabledQuestion && (\n              <button\n                id=\"next\"\n                type=\"button\"\n                onClick={ this.nextClick }\n              >\n                Next\n              </button>\n            )}\n          </div>\n        ) }\n\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  name: state.player.name,\n  assertions: state.player.assertions,\n  score: state.player.score,\n  difficulty: state.player.difficulty,\n  category: state.player.category,\n});\n\nexport default connect(mapStateToProps)(Game);","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nclass Feedback extends React.Component {\n  showMessage = () => {\n    const { assertions } = this.props;\n    const minAssertions = 3;\n    if (assertions < minAssertions) {\n      return 'Could be better...';\n    }\n    return 'Well Done!';\n  }\n\n  render() {\n    const { history } = this.props;\n    return (\n      <div id=\"feedback\">\n        <p>{this.showMessage()}</p>\n        <button\n          type=\"button\"\n          onClick={ () => history.push('/') }\n        >\n          Play Again\n        </button>\n        <button\n          type=\"button\"\n          onClick={ () => history.push('/ranking') }\n        >\n          Ranking\n        </button>\n      </div>\n\n    );\n  }\n}\nconst mapStateToProps = (state) => ({\n  assertions: state.player.assertions,\n});\n\nFeedback.propTypes = {\n  assertions: PropTypes.number,\n  score: PropTypes.number,\n}.isRequired;\n\nexport default connect(mapStateToProps)(Feedback);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nclass Ranking extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      ranking: [],\n    };\n  }\n\n  componentDidMount() {\n    const ranking = JSON.parse(localStorage.getItem('ranking'))\n    if (ranking !== null) {\n      const sortedRanking = ranking.sort((a, b) => b.score - a.score);\n      this.setState({ ranking: sortedRanking });\n    }\n  }\n\n  render() {\n    const { ranking } = this.state;\n    return (\n      <div id=\"ranking\">\n        <h1>Ranking</h1>\n        <div >\n          {ranking.map(({ name, score }, index) => (\n            <div class=\"ranking-list\" key={ index + 1 }>\n              <p>{`#${ index + 1 }`}</p>\n              <p>{ name }</p>\n              <p>{ score }</p>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  name: state.player.name,\n  score: state.player.score,\n});\n\nRanking.propTypes = {\n  name: PropTypes.string,\n  score: PropTypes.number,\n}.isRequired;\n\nexport default connect(mapStateToProps, null)(Ranking);\n","import React from 'react';\nimport { Switch, Route, Link } from 'react-router-dom';\nimport logo from './trivia.png';\nimport Login from './pages/Login';\nimport Game from './pages/Game';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\nimport './App.scss';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Link to=\"/\">\n          <img src={ logo } className=\"App-logo\" alt=\"logo\" />\n        </Link>\n        <Switch>\n          <Route exact path=\"/game\" component={ Game } />\n          <Route exact path=\"/feedback\" component={ Feedback } />\n          <Route exact path=\"/\" component={ Login } />\n          <Route exact path=\"/ranking\" component={ Ranking } />\n        </Switch>\n      </header>\n    </div>\n  );\n}\n","const INITIAL_STATE = {\n  name: '',\n  assertions: 0,\n  score: 0,\n  difficulty: 'any',\n  category: 'any',\n};\n\nconst playerReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case 'ADD_USER':\n    return { ...state, ...action.payload };\n  case 'UPDATE_SCORE':\n    return { ...state, ...action.payload };\n  case 'RESET_STATE':\n    return { ...INITIAL_STATE };\n  default:\n    return state;\n  }\n};\n\nexport default playerReducer;\n","import { combineReducers } from 'redux';\nimport player from './player';\n\nconst rootReducer = combineReducers({ player });\n\nexport default rootReducer;\n","import { legacy_createStore as createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n\n  document.getElementById('root'),\n);"],"sourceRoot":""}